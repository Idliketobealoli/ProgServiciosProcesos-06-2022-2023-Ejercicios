openapi: "3.0.3"
info:
  title: "empleado_departamento_ktor API"
  description: "empleado_departamento_ktor API"
  version: "1.0.0"
servers:
- url: "https://empleado_departamento_ktor"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /empleados:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Empleado"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
  /empleados/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Empleado"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
    patch:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /empleados/{email}:
    get:
      description: ""
      parameters:
      - name: "email"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Empleado"
  /empleados/hola:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hola empleados"
  /empleados/login:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /empleados/register:
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmpleadoDto"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /departamentos:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Departamento"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
    patch:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /departamentos/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Departamento"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
  /departamentos/hola:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hola departamentos"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
  /api/storage:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
  /api/storage/{fileName}:
    get:
      description: ""
      parameters:
      - name: "fileName"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /api/storage/check:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
components:
  schemas:
    Empleado:
      type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        surname:
          type: "string"
        email:
          type: "string"
        salary:
          type: "number"
          format: "double"
        departamento:
          type: "string"
        rol:
          type: "string"
          enum:
          - "EMPLEADO"
          - "ADMIN"
    EmpleadoDto:
      type: "object"
      properties:
        uuid:
          type: "string"
        name:
          type: "string"
        surname:
          type: "string"
        email:
          type: "string"
        salary:
          type: "number"
          format: "double"
        departamento:
          type: "string"
        rol:
          type: "string"
    Departamento:
      type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        empleados:
          type: "array"
          items:
            $ref: "#/components/schemas/Empleado"
    Map:
      type: "object"
      properties: {}